####################################################################
#  GitHub Action to perform continuous integration (CI) of database
#  changes using Liquibase Pro, Liquibase Pro Flows, Custom Quality
#  checks and S3.
#####################################################################
name: 'Liquibase Pro CD Job'

on:
  push:
    branches:
      - 'develop'

####################################################################
#  Set up the environment
#####################################################################
env:
#  The top level Flow File that orchestrates the database changes
  FLOW_FILE: "liquibase-process/flowfiles/liquibase-postmerge.flowfile.yaml"

#  Search path (See https://docs.liquibase.com/concepts/changelogs/how-liquibase-finds-files.html)
  LIQUIBASE_SEARCH_PATH: ".,liquibase-process"

#  The database changelog. See https://docs.liquibase.com/concepts/changelogs/working-with-changelogs.html
  # LIQUIBASE_COMMAND_CHANGELOG_FILE: "sqlcode/rootchangelog.yaml"

#  Location of the Quality Checks settings file
  LIQUIBASE_COMMAND_CHECKS_SETTINGS_FILE: "liquibase-process/policychecks/liquibase.checks-settings.conf"

#  Pro License key
#  See https://docs.liquibase.com/workflows/liquibase-pro/how-to-apply-your-liquibase-pro-license-key.html
  LIQUIBASE_LICENSE_KEY: ${{ secrets.LIQUIBASE_PRO_LICENSE_KEY }}

#  JDBC URL of the database per environment
#  See https://docs.liquibase.com/workflows/liquibase-community/using-jdbc-url-in-liquibase.html
  LIQUIBASE_COMMAND_URL: ${{ secrets.LIQUIBASE_COMMAND_URL }}

#  Credentials for the environment's database https://docs.liquibase.com/parameters/command-parameters.html
  LIQUIBASE_COMMAND_USERNAME: ${{ secrets.LIQUIBASE_COMMAND_USERNAME }}
  LIQUIBASE_COMMAND_PASSWORD: ${{ secrets.LIQUIBASE_COMMAND_PASSWORD }}
#
#  Logging Settings
  LIQUIBASE_LOG_FORMAT: JSON
  LIQUIBASE_LOG_LEVEL: INFO

jobs:
  ####################################################################
  #  Initialization
  ####################################################################
  init:
    runs-on: [self-hosted]
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}
    steps:
      - name: Cancel previous workflow
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Set Environment
        id: set-environment
        run: |
          echo "environment=DEV" >> $GITHUB_OUTPUT
          if [[ "${{github.base_ref}}" == qa || "${{github.ref}}" == refs/heads/qa ]]; then
            echo "environment=QA" >> $GITHUB_OUTPUT
          fi
          if [[ "${{github.base_ref}}" == release* || "${{github.ref}}" == refs/heads/release* ]]; then
            echo "environment=PROD" >> $GITHUB_OUTPUT
          fi

  print-environment:
    runs-on: [self-hosted]
    needs: init
    steps:
      - env:
          ENVIRONMENT: ${{needs.init.outputs.environment}}
        run: echo "$ENVIRONMENT"

  ###################################################################
  #  Check out the source code
  ####################################################################
  checkout-repo:
    needs: [init]
    # Our database runs on Liquibase internal network, so we use a self-hosted runner
    # https://docs.github.com/en/actions/using-github-hosted-runners/connecting-to-a-private-network
    runs-on: [self-hosted]

    steps:
      # Check out the source code
      - name: Checkout Database Source repo
        uses: actions/checkout@v3

      # Check out the Liquibase Configuration Repo
      - name: Checkout Liquibase Configuration repo
        uses: actions/checkout@v4
        with:
          repository: adeelmalik78/Automations
          path: liquibase-process

  ####################################################################
  #  Perform Liquibase Pro database change control operations
  #####################################################################
  liquibase-deployment:
    needs: [checkout-repo, init]
    runs-on: [self-hosted]

    environment: ${{needs.init.outputs.environment}}

    steps:
      # Validate parseability of the Flow file
      - name: Validate flow
        run: |
          liquibase --license-key=${{ secrets.LIQUIBASE_LICENSE_KEY }} flow validate \
             --flow-file=${{ env.FLOW_FILE }} \
             --logfile=logs/liquibase.log

      # Execute the Flow file
      - name: Run flow
        run: |
          liquibase --license-key=${{ secrets.LIQUIBASE_LICENSE_KEY }} flow \
             --flow-file=${{ env.FLOW_FILE }} \
             --logfile=logs/liquibase.log

